import {CreateStorageEntityData, CreateStorageEntity, StorageEntity} from "domain/storage-entity/StorageEntity";
import {CreateStorageEntityHistory} from "domain/storage-entity/StorageEntityHistory";
import {MakeStorageEntityGateway, StorageEntityGateway} from "gateway/storage-entity/StorageEntityGateway";
import {InvalidArgumentException} from "domain/Exception";
import {MakeStorageEntityHistoryGateway, StorageEntityHistoryGateway} from "gateway/storage-entity/StorageEntityHistoryGateway";


export function MakeStorageEntityCommandSystem(gateway?: StorageEntityGateway, historyGateway?: StorageEntityHistoryGateway) {
    return new StorageEntityCommandSystem(gateway || MakeStorageEntityGateway(), historyGateway || MakeStorageEntityHistoryGateway());
}


class StorageEntityCommandSystem {
    private gateway: StorageEntityGateway;
    private historyGateway: StorageEntityHistoryGateway;

    constructor(gateway: StorageEntityGateway, historyGateway: StorageEntityHistoryGateway) {
        this.gateway = gateway;
        this.historyGateway = historyGateway;
    }

    public createStorageEntity(data: CreateStorageEntityData) {
        const key = data.key;
        let saved = this.gateway.findByKey(key);        
        if (saved) {
            // update history
            let historyRecord = CreateStorageEntityHistory(saved.toJSON());
            console.log(historyRecord);
            historyRecord.setTime(new Date());
            this.historyGateway.create(historyRecord);
            // update current value
            saved.setValue(data.value);
            this.gateway.update(saved);
        } else {
            saved = this.gateway.create(CreateStorageEntity(data));
        }
        return saved;
    }
}
