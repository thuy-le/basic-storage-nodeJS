const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const uuidProvider = require("node-uuid");
import {Entity} from "domain/Entity";
import {InvalidArgumentException} from "domain/Exception";



export class NoneEmptyString {
    private _value: string;

    constructor(_value: string) {
        if (!_value || _value.trim().length <= 0) {
            throw new InvalidArgumentException("Inputted string cannot be empty");
        }
        this._value = _value;
    }

    get value(): string {
        return this.value;
    }

}

export class ValidTimestamp {
    private timestamp: string;    
    constructor(timestamp: number) {
        if ((new Date(timestamp)).getTime() <= 0) {
            throw new InvalidArgumentException("Invalid timestamp");
        }
        this.timestamp = timestamp.toString();
    }

    get value(): string {
        return this.timestamp;
    }
}

export interface CreateStorageEntityHistoryData {
    id?: string; 
    key: string;
    value: string;
}

export interface StorageEntityHistory extends Entity {
    getKey(): string;
    getValue(): string;
    setValue(value: string): void;
    setTime(value: Date): void;
}

export function StorageEntityHistoryFromRecord(record: any): StorageEntityHistory {
    return new StorageEntityHistoryImpl(record);
}

export interface StorageEntityHistoryDBRecord {
    id: string;
    key: string;
    value: string;
    timestamp: Date;
}

export function CreateStorageEntityHistory(data: CreateStorageEntityHistoryData, id = uuidProvider.v4()): StorageEntityHistory {
    return new StorageEntityHistoryImpl(new StorageEntityHistoryImpl.SCHEMA({
        id,
        key: data.key,
        value: data.value
    }));
}

export class StorageEntityHistoryImpl implements StorageEntityHistory {

    private _record: StorageEntityHistoryDBRecord;

    constructor(record: StorageEntityHistoryDBRecord) {
        this._record = record;
    }

    get record(): StorageEntityHistoryDBRecord {
        return this._record;
    }

    public static SCHEMA = mongoose.model('StorageEntityHistory', new Schema({
        id: { type: String, required: true, unique: true },
        key: { type: String, required: true },
        value: { type: String, required: true },
        timestamp: { type : Date, default: Date.now },
    }, { collection: 'StorageEntityHistory' }));

    public toJSON() {
        return {
            id: this._record.id,
            key: this._record.key,
            value: this._record.value,
        };
    }

    public getId(): string {
        return this.record.id;
    }

    public getKey(): string {
        return this.record.key;
    }

    public getValue(): string {
        return this.record.value;
    }
    
    public setValue(value: string): void {
        this._record.value = value;
    }

    public setTime(value: Date): void {
        this._record.timestamp = value;
    }

}
