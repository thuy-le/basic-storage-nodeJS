const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const uuidProvider = require("node-uuid");
import {Entity} from "domain/Entity";
import {InvalidArgumentException} from "domain/Exception";



export class NoneEmptyString {
    private _value: string;

    constructor(_value: string) {
        if (!_value || _value.trim().length <= 0) {
            throw new InvalidArgumentException("Inputted string cannot be empty");
        }
        this._value = _value;
    }

    get value(): string {
        return this.value;
    }

}

export interface CreateStorageEntityData {
    id?: string; 
    key: string;
    value: string;
}

export interface StorageEntity extends Entity {
    getKey(): string;
    getValue(): string;
    setValue(value: string): void;
}

export function StorageEntityFromRecord(record: any): StorageEntity {
    return new StorageEntityImpl(record);
}

export interface StorageEntityDBRecord {
    id: string;
    key: string;
    value: string;
}

export function CreateStorageEntity(data: CreateStorageEntityData, id = uuidProvider.v4()): StorageEntity {
    return new StorageEntityImpl(new StorageEntityImpl.SCHEMA({
        id,
        key: data.key,
        value: data.value
    }));
}

export class StorageEntityImpl implements StorageEntity {

    private _record: StorageEntityDBRecord;

    constructor(record: StorageEntityDBRecord) {
        this._record = record;
    }

    get record(): any {
        return this._record;
    }

    public static SCHEMA = mongoose.model('StorageEntity', new Schema({
        id: { type: String, required: true, unique: true },
        key: { type: String, required: true, unique: true },
        value: { type: String, required: true },
    }, { collection: 'StorageEntity' }));

    public toJSON() {
        return {
            id: this._record.id,
            key: this._record.key,
            value: this._record.value,
        };
    }

    public getId(): string {
        return this._record.id;
    }

    public getKey(): string {
        return this._record.key;
    }

    public getValue(): string {
        return this._record.value;
    }
    
    public setValue(value: string): void {
        this._record.value = value;
    }
}
