const uuidProvider = require("node-uuid");
import {RandomGenerator} from "domain/RandomGenerator";
const randomGenerator = new RandomGenerator();
import {Entity} from "domain/Entity";
import WaitFor from "framework/WaitFor";
import {SequelizeClass} from "application/SequelizeClass";
const Connection = SequelizeClass.getConnection().connection;
const Sequelize = SequelizeClass.getConnection().Sequelize;

export interface CreateContactData {
    contactId: string;
    surName: string;
    name: string;
    email: string;
    phoneNumber: number;
    message: string;
    contactDate: Date;

}
export interface Contact extends Entity {
    getEmail(): string;
}

export  function ContactFromRecord(record: any): Contact {
    return new ContactImpl(record);
}
export class ContactImpl implements Contact {
    private  _record: any;
    constructor(record: any){
        this._record = record;
        Connection.sync();
    }
    get record(): any{
        return this._record;
    }

    public static SCHEMA = Connection.define('Contact', {
        contactId: {type: Sequelize.STRING, unique:true, allowNull: false, autoIncrement: true, primaryKey: true},
        surName: {type:Sequelize.STRING, unique: true, allowNull: false},
        name: {type:Sequelize.STRING, unique: true, allowNull: false},
        email:{type:Sequelize.STRING, unique: true, allowNull: false},
        phoneNumber: {type:Sequelize.NUMBER, unique: true, allowNull: false},
        message: {type:Sequelize.STRING, unique: true, allowNull: true},
        contactDate: {type:Sequelize.DATE, unique: true, allowNull: false}
    },{
        freezeTableName: true,
        paranoid: true,
    });
    public toJSON() {
        return {
            surName: this.record.surName,
            name: this.record.name,
            email: this.record.email,
            phoneNumber: this.record.phoneNumber,
            message: this.record.message,
            contactDate: this.record.contactDate,
        }
    }
    public getEmail(): string {
        return this.record.email;
    }

    public getId(): string {
        return this.record.contactId;
    }
}