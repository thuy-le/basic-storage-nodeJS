const uuidProvider = require("node-uuid");
import {getFullName} from "framework/Util";
import {RandomGenerator} from "domain/RandomGenerator";
const randomGenerator = new RandomGenerator();
import {Entity} from "domain/Entity";
import WaitFor from "framework/WaitFor";
const wait = WaitFor;
import {SequelizeClass} from "application/SequelizeClass";
const Sequelize = SequelizeClass.getConnection().Sequelize;
const Connection = SequelizeClass.getConnection().connection;

export interface CreateUserData {
    username: string;
    password: string;
    email: string;
}


export interface User extends Entity {
    getEmail(): string;
}


export function UserFromRecord(record: any): User {
    return new UserImpl(record);
}

export class UserImpl implements User {

    private _record: any;

    constructor(record: any) {
        this._record = record;
        Connection.sync();
    }

    get record(): any {
        return this._record;
    }

    public static SCHEMA = Connection.define('User', {
            userId: {type: Sequelize.STRING, unique: true, allowNull: false},
            email: {type: Sequelize.STRING, unique: true, allowNull: false},
            username: {type: Sequelize.STRING, unique: true, allowNull: false},
            password: {type: Sequelize.STRING, allowNull: false}
        },
        {
            freezeTableName: true,
            paranoid: true,
        });

    public toJSON() {
        return {
            id: this.record.userId,
            email: this.record.email,
            username: this.record.username,
        };
    }

    public getEmail(): string {
        return this.record.email;
    }

    public getId(): string {
        return this.record.userId;
    }
}