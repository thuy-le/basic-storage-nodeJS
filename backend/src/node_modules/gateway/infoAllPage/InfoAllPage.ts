import {InfoAllPage, CreateInfoAllPage, InfoAllPageRecordFrom, InfoAllPageImpl} from "domain/infoAllPage/InfoAllPage";
import {UnauthorizationException, ObjectAlreadyExist} from "domain/Exception";
import WaitFor from "framework/WaitFor";
const Promise = require("promise");
const uuidProvider = require("node-uuid");

export function MakeInfoAllPage (schema?: any, wait?: any){
    return  new InfoAllPageGateway (schema || InfoAllPageImpl.SCHEMA, wait || WaitFor);
}
export class InfoAllPageGateway {
    private schema: any;
    private wait: any;

    constructor (schema: any, wait: any){
        this.schema = schema;
        this.wait = wait;
    }

    public CreateInfoPage (infoPage: CreateInfoAllPage): InfoAllPage {
        var self = this;
        return this.wait (new Promise(function (resolve, reject){
            self.schema.create({
                id: uuidProvider.v4(),
                dataInfo: infoPage.dataInfo,
            }).then(function (infoAllPage){
                resolve(InfoAllPageRecordFrom(infoAllPage));
            }).catch(function (err) {
                reject(err);
            })
        }))
    }

    public getAllInfoPage(): InfoAllPage {
        const record = this.wait(this.schema.find());
        if(!record) throw  new UnauthorizationException("Fail show data");
        return InfoAllPageRecordFrom(record);
    }
}

