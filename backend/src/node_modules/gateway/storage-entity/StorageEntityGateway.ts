import { ObjectNotFoundException } from "domain/Exception";
import {StorageEntity, StorageEntityImpl, StorageEntityFromRecord, CreateStorageEntityData} from "domain/storage-entity/StorageEntity";
import WaitFor from "framework/WaitFor";
const Promise = require("promise");
const uuidProvider = require("node-uuid");
import {CrudGateway, MakeCrudGateway} from "gateway/CrudGateway";



export function MakeStorageEntityGateway(schema?: any, wait?: any, crud?: CrudGateway<StorageEntity>) {
    return new StorageEntityGateway(schema || StorageEntityImpl.SCHEMA, wait || WaitFor, 
    crud || MakeCrudGateway(schema || StorageEntityImpl.SCHEMA, StorageEntityFromRecord));
}


export class StorageEntityGateway {

    private schema: any;
    private wait: any;
    private crud: CrudGateway<StorageEntity>;

    constructor(schema: any, wait: any, crud: CrudGateway<StorageEntity>) {
        this.schema = schema;
        this.wait = wait;
        this.crud = crud;
    }

    public create(data: StorageEntity): StorageEntity {
        return this.crud.create(data);
    }

    public update(data: StorageEntity): void {
        this.crud.update(data);
    }

    public findByKey(key: string): StorageEntity {
        try {
            return this.crud.findOne({key});
        } catch(exception) {
            if (exception instanceof ObjectNotFoundException) {
                return null;
            } else {
                throw exception;
            }
        }
    }

}