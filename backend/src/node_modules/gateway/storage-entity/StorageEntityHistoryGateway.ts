import { ObjectNotFoundException } from "domain/Exception";
import {StorageEntityHistory, StorageEntityHistoryImpl, StorageEntityHistoryFromRecord, CreateStorageEntityHistoryData} from "domain/storage-entity/StorageEntityHistory";
import WaitFor from "framework/WaitFor";
const Promise = require("promise");
const uuidProvider = require("node-uuid");
import {CrudGateway, MakeCrudGateway} from "gateway/CrudGateway";



export function MakeStorageEntityHistoryGateway(schema?: any, wait?: any, crud?: CrudGateway<StorageEntityHistory>) {
    return new StorageEntityHistoryGateway(schema || StorageEntityHistoryImpl.SCHEMA, wait || WaitFor, 
    crud || MakeCrudGateway(schema || StorageEntityHistoryImpl.SCHEMA, StorageEntityHistoryFromRecord));
}


export class StorageEntityHistoryGateway {

    private schema: any;
    private wait: any;
    private crud: CrudGateway<StorageEntityHistory>;

    constructor(schema: any, wait: any, crud: CrudGateway<StorageEntityHistory>) {
        this.schema = schema;
        this.wait = wait;
        this.crud = crud;
    }

    public create(data: StorageEntityHistory): StorageEntityHistory {
        return this.crud.create(data);
    }
    
    public findByKeyAndTimestamp(key: string, timestamp: Date): StorageEntityHistory {        
        const record = this.wait(this.schema.find({key, timestamp: {$lte: timestamp}}).sort({"timestamp": -1}).limit(1));        
        return (record && record.length > 0) ? StorageEntityHistoryFromRecord(record[0]) : null;
    }

}