import {User, UserImpl, UserFromRecord, CreateUserData} from "domain/user/User";
import WaitFor from "framework/WaitFor";
const Promise = require("promise");
import {UnauthorizationException, ObjectAlreadyExist} from "domain/Exception";
const moment = require("moment");
import {RandomGenerator} from "domain/RandomGenerator";
const randomGenerator = new RandomGenerator();
const uuidProvider = require("node-uuid");


export function MakeUserGateway(schema?: any, wait?: any) {
    return new UserGateway(schema || UserImpl.SCHEMA, wait || WaitFor);
}


export class UserGateway {

    private schema: any;
    private wait: any;

    constructor(schema: any, wait: any) {
        this.schema = schema;
        this.wait = wait;
        //Auto create tables if not exitxs
        this.schema.sync().then(function(){
            console.log(`It ok create tables if tables does not exist`);
        }).catch(function(err){
            console.log("Oh no, Have error when sync with tables ",err);
        });
    }

    public create(user: CreateUserData): User {
        var self = this;
        return this.wait(new Promise(function(resolve, reject){
            self.schema.create({
                userId: uuidProvider.v4(),
                email: user.email,
                username: user.username,
                password: user.password
            }).then(function(user){
                resolve(UserFromRecord(user));
            }).catch(function(err){
                reject(err);
            })
        }))
    }

    public update(user: User) {

    }

    public validateUser(email: string, password: string): User {
        const record = this.wait(this.schema.findOne({
            where: {
                email: email,
                password: password
            }
        }));
        if (!record) throw new UnauthorizationException("Invalid Email or Password");
        return UserFromRecord(record);
    }

    //public findById(userId: string): User {

    // }
}